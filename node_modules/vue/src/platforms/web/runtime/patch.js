/* @flow */

import * as nodeOps from 'web/runtime/node-ops'
import { createPatchFunction } from 'core/vdom/patch'
import baseModules from 'core/vdom/modules/index'
import platformModules from 'web/runtime/modules/index'

// the directive module should be applied last, after all
// built-in modules have been applied.
const modules = platformModules.concat(baseModules)

/*
 这里利用了函数科里化
 不同的平台生成vnode的方式是不一样的，在生成vnode的过程中执行的钩子函数也是不一样的，
 这里通过函数科里化，将这些差异抹平，返回一个patch函数，这样就不必在返回函数中判断差异了，
 在调用patch的时候也不用再传这些差异化的参数
 */
export const patch: Function = createPatchFunction({ nodeOps, modules })   //nodeOps是定义的一些操作dom的方法  modules 是 platformModules 和baseModules的合集，定义了一些属性 类等的钩子函数，在patch过程中会调用这些不同模块的钩子函数。
