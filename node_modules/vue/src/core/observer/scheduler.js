/* @flow */

import type Watcher from './watcher'
import config from '../config'
import { callHook, activateChildComponent } from '../instance/lifecycle'

import {
  warn,
  nextTick,   // nextTick vue不同的版本实现不一样，process.nextTick,但是浏览器不支持，promise.resolve来代替，有些浏览器又不支持promise,所以做了一个降级，用settimeout来代替
  devtools,
  inBrowser,
  isIE
} from '../util/index'

export const MAX_UPDATE_COUNT = 100

// watcher队列，简单的理解为事件队列
const queue: Array<Watcher> = []   // watcher的数组
const activatedChildren: Array<Component> = []    //激活的children
let has: { [key: number]: ?true } = {}            //判断watcher不能重复添加
let circular: { [key: number]: number } = {}   // 循环更新用的

// 异步的触发没有开始，类比setTimeout还没有执行
let waiting = false

//开始渲染，清空队列，执行队列中的watcher的run方法
let flushing = false
let index = 0    // 队列依次执行的时候的一个序号   当前queue队列中watcher的一个索引

/**
 * Reset the scheduler's state.
 */

//清空队列
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0
  has = {}
  if (process.env.NODE_ENV !== 'production') {
    circular = {}
  }
  waiting = flushing = false
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
export let currentFlushTimestamp = 0

// Async edge case fix requires storing an event listener's attach timestamp.
let getNow: () => number = Date.now

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  const performance = window.performance
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = () => performance.now()
  }
}

/**
 * Flush both queues and run the watchers.
 作用，
  1. 在下一个tick中执行 flushSchedulerQueue();
  2.  flushScedulerQuere() 的主要作用， 执行queue队列中所有的所有watcher
  3.执行watcher，通过调用 watcher.run()
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow()
  flushing = true       //代表queue 队列正在执行
  let watcher, id

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
    /*
      1.组件的更新是父到子的，所以要保证父组件的watcher在前面（因为父组件总是在子组件之前被创建
      2. user watcher 是在 渲染watcher之前的，（因为用户watcher的创建在渲染watcher之前）
      3.如果子组件的销毁是在父组件的的watcher的回调中执行的时候，子组件的watcher可以被跳过
     */
  queue.sort((a, b) => a.id - b.id)   // queue中的watcher进行排序，watcher 按照 id从小到大进行排序

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index]
    if (watcher.before) {
      watcher.before()
    }
    id = watcher.id
    has[id] = null     // 该watcer在执行了，表示在执行queue过程中，正在执行的这个这个watcher可以被再次添加到queue
    watcher.run()  // watcher.run()执行过程中 会触发一些回调，这些回调执行过程中可能再次执行queueWatcher
                  // 这个时候，queue.length可能会改变， 还可能触发 无线循环的bug
    // in dev build, check and stop circular updates.
    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1
      if (circular[id] > MAX_UPDATE_COUNT) {   // 判断有没有无线循环更新的状况，有的话就报警告  循环执行的次数大于100次的时候，就会报出警告
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? `in watcher with expression "${watcher.expression}"`
              : `in a component render function.`
          ),
          watcher.vm
        )
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  const activatedQueue = activatedChildren.slice()
  const updatedQueue = queue.slice()

  resetSchedulerState()

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue)
  callUpdatedHooks(updatedQueue)   // 执行updated钩子函数

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush')
  }
}

function callUpdatedHooks (queue) {
  let i = queue.length
  while (i--) {
    const watcher = queue[i]
    const vm = watcher.vm
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {   // 是渲染watcher的时候，会执行一次updated钩子
      callHook(vm, 'updated')
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
export function queueActivatedComponent (vm: Component) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false
  activatedChildren.push(vm)
}

function callActivatedHooks (queue) {
  for (let i = 0; i < queue.length; i++) {
    queue[i]._inactive = true
    activateChildComponent(queue[i], true /* true */)
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
export function queueWatcher (watcher: Watcher) {
  const id = watcher.id
  if (has[id] == null) {   // 一个watcher可能对应多个属性，即：多个属性变化，更新的是同一个watcher，这些相同的watcher执行多次updata,只会添加到queue中一次，相同的watcher不会被重复添加
    has[id] = true
    if (!flushing) {    // flushing 一开始为false   在 flushSchedulerQueue() 中 置为true
      queue.push(watcher)
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
        // 如果 flushing为true，表示当前queue中watcher正在执行
          // watcher添加到队列中的位置,将根据它的id来确定，新添加的watcher将紧紧 接着id比他大的watcher的后面，
        /*
          index 是当前queue中正在执行的watcher的序号
           添加watcher到queue中的位置
           1.在正在执行的watcher之后，
           2.排在它后面的watcher的id不能大于添加的watcher的id

           在一个nextTick的回调函数开始执行后，watcher不再通过 push来添加到queue，因为 回掉函数执行后，queue就进行了重新排序
           按照watcher的id的大小进行了排序
         */
      let i = queue.length - 1
      while (i > index && queue[i].id > watcher.id) {
        i--
      }
      queue.splice(i + 1, 0, watcher)
    }
    // queue the flush
    if (!waiting) {   //一开始也是false,保证 nextTick只执行一次  ， 当一个nextTick没有执行完的时候，不能开启下一个nextTick
      waiting = true

      if (process.env.NODE_ENV !== 'production' && !config.async) {
        flushSchedulerQueue()
        return
      }
      nextTick(flushSchedulerQueue)   // 让任务队列中的watcher在"下一次的事件循环"中触发，
                                      //不阻塞当前的处理逻辑
        /*
             nextTick,就是先推到quene中，下一个事件循环再执行
             flushSchedulerQueue 做的事情就是 遍历 队列 quene, 然后执行里面的逻辑
         */
    }
  }
}
