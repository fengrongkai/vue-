/* @flow */

import {
  warn,
  remove,
  isObject,
  parsePath,
  _Set as Set,
  handleError,
  noop
} from '../util/index'

import { traverse } from './traverse'
import { queueWatcher } from './scheduler'
import Dep, { pushTarget, popTarget } from './dep'

import type { SimpleSet } from '../util/index'

let uid = 0   //标识watcher用的

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
export default class Watcher {
  vm: Component;
  expression: string;   // 关联表达式，或者 渲染方法体
  cb: Function;       ////在定义Vue构造函数的时候，传入的watch, watch属性监听配置项
  id: number;
  deep: boolean;
  user: boolean;
  lazy: boolean;    // 计算属性，和watch来控制不要让Watcher 立即执行
  sync: boolean;
  dirty: boolean;
  active: boolean;

  // 在vue中使用二次提交的概念
  //每次在数据 渲染 或 计算的时候 就会 访问 响应式的数据，就会进行依赖收集
  // 就将 关联的 Wathcer 与dep 关联，
  // 在数据发生变化的时候，根据dep找到关联的Watcher ,依次调用update,
  // 执行完成后清空watcher
  deps: Array<Dep>;
  depIds: SimpleSet;   // 是一个set类型 用来保证数据的唯一，用来避免出现重复的watcher进行重复的渲染

  newDeps: Array<Dep>;
  newDepIds: SimpleSet;


  before: ?Function;    // 在watcher触发之前的一个函数，类似与生命周期
  getter: Function;      // 就是 渲染函数 （模板或者组件的渲染） 或 计算属性（watch)
  value: any;           // 如果是渲染函数，value无效，如果是计算属性，就会有一个值，值就存储在value中

  constructor (
    vm: Component,
    expOrFn: string | Function,
    cb: Function,
    options?: ?Object,
    isRenderWatcher?: boolean   //是否是渲染watcher的标志位
  ) {
    this.vm = vm
    if (isRenderWatcher) {  // 标志位的 作用
      vm._watcher = this
    }
    vm._watchers.push(this)
    // options
    if (options) {
      this.deep = !!options.deep
      this.user = !!options.user
      this.lazy = !!options.lazy
      this.sync = !!options.sync
      this.before = options.before
    } else {
      this.deep = this.user = this.lazy = this.sync = false
    }
    this.cb = cb
    this.id = ++uid // uid for batching
    this.active = true
    this.dirty = this.lazy // for lazy watchers  就是computed watcher
    this.deps = []
    this.newDeps = []
    this.depIds = new Set()
    this.newDepIds = new Set()
    this.expression = process.env.NODE_ENV !== 'production'
      ? expOrFn.toString()
      : ''      //用来调试的时候去查看
    // parse expression for getter
    if (typeof expOrFn === 'function') {   // 就是render函数
      this.getter = expOrFn   //渲染函数_updata(), computed的get含少数
    } else {
      this.getter = parsePath(expOrFn)
      if (!this.getter) {
        this.getter = noop
        process.env.NODE_ENV !== 'production' && warn(
          `Failed watching path: "${expOrFn}" ` +
          'Watcher only accepts simple dot-delimited paths. ' +
          'For full control, use a function instead.',
          vm
        )
      }
    }
    // 如果是lazy就什么也不错，否则就立即调用 getter函数求值（expOrfn)
    this.value = this.lazy   // computed watcher 不会立马求值
      ? undefined
      : this.get()
  }

  /**
   * Evaluate the getter, and re-collect dependencies.
   *
   作用
   1.将 Dep.target 指向当前的watcher
   2.执行watcher.getter（）  // 渲染watcher时，是渲染函数
   */
  get () {
    pushTarget(this)   // 把当前的watcher放在全局作用域上   Dep.target指向当前的watcher
    let value
    const vm = this.vm
    try {
      // 在这个过程中会触发get,进行依赖收集
      value = this.getter.call(vm, vm)   //渲染watcher的话，渲染函数 ;或者watch表达式的函数，或者计算属性的watch
    } catch (e) {
      if (this.user) {
        handleError(e, vm, `getter for watcher "${this.expression}"`)
      } else {
        throw e
      }
    } finally {
      // "touch" every property so they are all tracked as
      // dependencies for deep watching
      if (this.deep) {
        traverse(value)   // 在调用完成以后，进行一个递归访问这个属性 进行依赖收集
      }
      popTarget()   // 在执行结束的时候，把当前的watcher从全局作用域上移除 ；使得Dep.target指向 targetStack中下一个watcher
      this.cleanupDeps()   //“清空”关联的dep数据   可以认为是归档
    }
    return value
  }

  /**
   * Add a dependency to this directive.
   作用是收集依赖
   作用：
   1.将dep的id 推入到 newDepIds数组中   (条件是 newDepIds 中没有  当前这个 dep)
   2.将dep 推入到 newDeps 数组中       (条件是 newDepIds 中没有  当前这个 dep)
   3.将 watcher 推入到 dep 的订阅列表中  （条件是 depIds 和 newDepIds 中都没有 当前的这个dep)
   */
  addDep (dep: Dep) {     // 被 Dep.depend（this）,调用，参数是watcher绑定的dep,
    const id = dep.id
    if (!this.newDepIds.has(id)) {   // id在newDepIds中 就跳过，避免重复的依赖
      this.newDepIds.add(id)
      this.newDeps.push(dep)   // 让 wacther 关联 到 dep
      if (!this.depIds.has(id)) {
        dep.addSub(this)   // 让dep 关联到watcher
      }
    }
  }

  /**
   * Clean up for dependency collection.
   作用：
    1.循环deps,
    2.deps中有的dep,但是newDepIds中没有的，就把当前的watcher从sub中删除掉
   3. depIds = newDepIds; newDepIds = depIds;  depIds的值跟 newDepIds的值互换

   */
  cleanupDeps () {   //
    let i = this.deps.length
    while (i--) {
      const dep = this.deps[i]
      if (!this.newDepIds.has(dep.id)) {   // 在二次提交中， 归档就是 让 旧的 deps 和 新的 newDeps 一致
        dep.removeSub(this)
      }
    }
    let tmp = this.depIds
    this.depIds = this.newDepIds
    this.newDepIds = tmp
    this.newDepIds.clear()
    tmp = this.deps
    this.deps = this.newDeps   // 同步处理
    this.newDeps = tmp
    this.newDeps.length = 0
  }

  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   */
  update () {   //  当数据更新的时候就会触发，
    /* istanbul ignore else */
    if (this.lazy) {  // 主要是针对计算属性，一般用于求值计算
      this.dirty = true
    } else if (this.sync) {  //同步watcher，只要用与服务端渲染 ssr,同步就表示立即计算
      this.run()
    } else {
      queueWatcher(this)   //一般浏览器中异步运行，本质上就是异步执行run
                          // 类比 setTimeout(()=>this.run(),0)
    }
  }

  /**
   * Scheduler job interface.
   * Will be called by the scheduler.
   调用get 求值，  如果求值，新旧不一样， 触发cb
   */
  run () {
    if (this.active) {
      const value = this.get()   // 要么渲染，要么求值（watch,computed)
      if (
        value !== this.value ||
        // Deep watchers and watchers on Object/Arrays should fire even
        // when the value is the same, because the value may
        // have mutated.
        isObject(value) ||
        this.deep
      ) {
        // set new value
        const oldValue = this.value
        this.value = value
        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue)
          } catch (e) {
            handleError(e, this.vm, `callback for watcher "${this.expression}"`)
          }
        } else {   // 对于渲染 watcher cb事件上是一个 noop（一个空函数）
          this.cb.call(this.vm, value, oldValue)
        }
      }
    }
  }

  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */
  evaluate () {   // 求值   二次提交，就表明数据有两个版本
    this.value = this.get()
    this.dirty = false   // 两个数据的版本不一致的时候，就说明有脏数据
  }

  /**
   * Depend on all deps collected by this watcher.
   */
  depend () {   //访问 所有的deps ,然后进行依赖
    let i = this.deps.length
    while (i--) {
      this.deps[i].depend()
    }
  }

  /**
   * Remove self from all dependencies' subscriber list.
   */
  teardown () {   // 就是一个 remove 移除数据
    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed.
      if (!this.vm._isBeingDestroyed) {
        remove(this.vm._watchers, this)
      }
      let i = this.deps.length
      while (i--) {
        this.deps[i].removeSub(this)
      }
      this.active = false
    }
  }
}
