/* @flow */

import Dep from './dep'
import VNode from '../vdom/vnode'
import { arrayMethods } from './array'
import {
  def,
  warn,
  hasOwn,
  hasProto,
  isObject,
  isPlainObject,
  isPrimitive,
  isUndef,
  isValidArrayIndex,
  isServerRendering
} from '../util/index'

const arrayKeys = Object.getOwnPropertyNames(arrayMethods)

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
export let shouldObserve: boolean = true

export function toggleObserving (value: boolean) {
  shouldObserve = value
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
/*

 */
export class Observer {
  value: any; // 循环引用，对象，__ob__,ob.value
  dep: Dep;
  vmCount: number; // number of vms that have this object as root $data

  constructor (value: any) {
    this.value = value
    this.dep = new Dep()   // 这个dep是定义在对象上的，不可遍历的，外界是可以访问到的，它的发布消息notify是可以手动触发，
    this.vmCount = 0
    def(value, '__ob__', this)  // 技巧，逻辑上 等价于 vlaue.__ob__ = this;

      // 响应式化的逻辑
    if (Array.isArray(value)) {
      // 如何进行浏览器的能力检查
      if (hasProto) {   // 判断浏览器是否兼容 __proto__
        protoAugment(value, arrayMethods)
      } else {
        copyAugment(value, arrayMethods, arrayKeys)
      }
      this.observeArray(value)   //遍历数组的元素，进行递归observe
    } else {
      this.walk(value)   //遍历对象的属性，递归observe
    }
  }

  /**
   * Walk through all properties and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */
  walk (obj: Object) {
    const keys = Object.keys(obj)
    for (let i = 0; i < keys.length; i++) {
      defineReactive(obj, keys[i])
    }
  }

  /**
   * Observe a list of Array items.
   */
  observeArray (items: Array<any>) {
    for (let i = 0, l = items.length; i < l; i++) {
      observe(items[i])
    }
  }
}

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */

// 浏览器支持 __proto__
function protoAugment (target, src: Object) {
  /* eslint-disable no-proto */
  target.__proto__ = src   //完成数组的原型链的修改，从而使数组变成响应式的（pop,shift,unshift....)
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */

// 如果浏览器不支持，就将这些方法直接混入到当前数组，属性访问元素
function copyAugment (target: Object, src: Object, keys: Array<string>) {
  for (let i = 0, l = keys.length; i < l; i++) {
    const key = keys[i]
    def(target, key, src[key])
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
//就是将传入的数据value变成响应式的对象
/*
先看对象是否含有__ob__, 并且是observe的实例 （ vue 中响应式的标记）
有，忽略，
没有，调用 new Observe(value),进行响应式的处理
 */
export function observe (value: any, asRootData: ?boolean): Observer | void {
  if (!isObject(value) || value instanceof VNode) {
    return   //不满足响应式的条件，就跳出
  }
  let ob: Observer | void
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {   // 判断对象是否以经设置了响应式，设置过了就不再设置
    ob = value.__ob__
  } else if (
    shouldObserve &&
    !isServerRendering() &&         //不是服务端渲染
    (Array.isArray(value) || isPlainObject(value)) &&   //  是一个数组或者独享
    Object.isExtensible(value) &&     // 对象是可扩展的
    !value._isVue                       // 对象不是Vue实例
  ) {
    ob = new Observer(value)
  }
  if (asRootData && ob) {
    ob.vmCount++
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
export function defineReactive (
  obj: Object,
  key: string,
  val: any,
  customSetter?: ?Function,
  shallow?: boolean
) {
  const dep = new Dep()  // 这个dep 只有get和set可以访问到，外部访问不到

    // 获取对象的属性描述符，就是定义Object.defineProperty 需要传入 对象{{enumerble,writeable,....}}
  const property = Object.getOwnPropertyDescriptor(obj, key)
  if (property && property.configurable === false) {    // 如果属性不可配置的，则返回
    return
  }

  // cater for pre-defined getter/setters
  const getter = property && property.get   // 渲染watcher中getter为undefined
  const setter = property && property.set   // 渲染watcerh中getter为undefined
  if ((!getter || setter) && arguments.length === 2) {   // 如果 getter不存在，或者setter存在，或者 传入的参数是两个的时候，即渲染watcher，初始化数组的时候
    val = obj[key]    // 从对象中取出key对应的初始值
  }

  let childOb = !shallow && observe(val)   // 渲染watcher中 shallow为undefined
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      const value = getter ? getter.call(obj) : val   // 如果已经定义的get方法可以继承下来，不会被丢失
      if (Dep.target) {
        dep.depend()

          //收集子属性
          // 这样 在设置Vue.set() 和调用 数组的方法（push,unshift...)的时候，之后就可以手动触发更新（dep.notify)
        if (childOb) {    //// 意思是Observer实例的dep也进行依赖收集，这里收集的依赖是可以在外界手动触发的；这个observer实例是挂在对象上的，可以外部访问到的
          childOb.dep.depend()   //这里 childOb 是val的Observe的实例上定义的dep， 现在在这个dep上添加了当前的渲染watcher,
                                // 在 Vue.set()方法中，ob.dep.notify()，就是调用了这个dep，触发渲染。如果不在这里收集依赖的话，在set()方法中就无法触发了
          if (Array.isArray(value)) {
            dependArray(value)
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      const value = getter ? getter.call(obj) : val    //渲染watcher的时候 getter=undefined  value=val val是defineReactive函数中的局部变量，一直存在于闭包的作用域链中
      /* eslint-disable no-self-compare */
        // 如果数据没有发生变化，就不会进行派发更新   NaN
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (process.env.NODE_ENV !== 'production' && customSetter) {
        customSetter()
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) return
      if (setter) {
        setter.call(obj, newVal)  // 保证了如果已经定义了set方法可以被继承，不会丢失
      } else {
        val = newVal
      }
      childOb = !shallow && observe(newVal)  // 对新值进行响应式化
      dep.notify()   //派发更新
    }
  })
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
export function set (target: Array<any> | Object, key: any, val: any): any {
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))    // 如果是undefined 或者是基础类型的值，警告
  ) {
    warn(`Cannot set reactive property on undefined, null, or primitive value: ${(target: any)}`)
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {   // 是一个数组，并且 isValidArrayIndex(key) 判断key是一个大于等于0 的整数
    target.length = Math.max(target.length, key)  // 设置数组的长度，数组的长度取决于  数组当前的长度和key的大小
    target.splice(key, 1, val)
    return val
  }
  if (key in target && !(key in Object.prototype)) {   // 如果对象上已经存在这个key属性，直接赋值就可以了
    target[key] = val
    return val
  }
  const ob = (target: any).__ob__
  if (target._isVue || (ob && ob.vmCount)) {  //target_isVue表示target是 vue实例 ， ob.vmCount 表示 target是 RootData
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    )
    return val
  }
  if (!ob) {   // target 不是响应式的对象
    target[key] = val
    return val
  }
  defineReactive(ob.value, key, val)
  ob.dep.notify()
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
export function del (target: Array<any> | Object, key: any) {
  if (process.env.NODE_ENV !== 'production' &&
    (isUndef(target) || isPrimitive(target))
  ) {
    warn(`Cannot delete reactive property on undefined, null, or primitive value: ${(target: any)}`)
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1)
    return
  }
  const ob = (target: any).__ob__
  if (target._isVue || (ob && ob.vmCount)) {
    process.env.NODE_ENV !== 'production' && warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    )
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key]
  if (!ob) {
    return
  }
  ob.dep.notify()
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value: Array<any>) {
  for (let e, i = 0, l = value.length; i < l; i++) {
    e = value[i]
    e && e.__ob__ && e.__ob__.dep.depend()   // 数组中的每一项是由对象组成的，对数组子项进行依赖收集
    if (Array.isArray(e)) {                  // 数组的子项还是数组，就进行递归，  目的是在 数组独享上绑定的observe对象上的dep进行依赖收集，水机对应的watcher
      dependArray(e)
    }
  }
}
