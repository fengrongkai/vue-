/* @flow */

import { warn } from './debug'
import { observe, toggleObserving, shouldObserve } from '../observer/index'
import {
  hasOwn,
  isObject,
  toRawType,
  hyphenate,
  capitalize,
  isPlainObject
} from 'shared/util'

type PropOptions = {
  type: Function | Array<Function> | null,
  default: any,
  required: ?boolean,
  validator: ?Function
};

// 主要做三件事情
/*
 1,对Boolean类型的值的处理
 2.对默认类型的值的处理
 3.对props做断言
 */
export function validateProp (
  key: string,
  propOptions: Object,
  propsData: Object,
  vm?: Component
): any {
  const prop = propOptions[key]
  const absent = !hasOwn(propsData, key)  // 看父组件有没有向子组件传递props的值
  let value = propsData[key]     // 拿到父组件传递的props的值
  // boolean casting
  const booleanIndex = getTypeIndex(Boolean, prop.type)  // 判断 props属性可不可以接收 Boolean类型
  if (booleanIndex > -1) {  // 接收的值类型包含Boolean类型
    if (absent && !hasOwn(prop, 'default')) {  //父组件没有传递props属性值，也没有设置默认值
      value = false
    } else if (value === '' || value === hyphenate(key)) {   // 接收的值时空字符串 或者接收的值跟key 转化为连字符后的值相等
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      const stringIndex = getTypeIndex(String, prop.type)
      if (stringIndex < 0 || booleanIndex < stringIndex) {  //接收的值类型不包括String类型，或者接收String类型，但是String类型在 布尔值之后
        value = true
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key)
    // since the default value is a fresh copy,
    // make sure to observe it.
      /*
      在取默认值的时候，子组件的props已经跟父组件无关了，所以props在设置为响应式的时候，需要递归到每一个属性
       */
    const prevShouldObserve = shouldObserve
    toggleObserving(true)   //  把sholdObserve 设置为true，是在把对象设置为响应式的时候，会递归到对象的每一个属性，都设置响应式
    observe(value)
    toggleObserving(prevShouldObserve)   设置完了以后，又把sholdObserve还原为原来的值
  }
  if (
    process.env.NODE_ENV !== 'production' &&
    // skip validation for weex recycle-list child component props
    !(__WEEX__ && isObject(value) && ('@binding' in value))
  ) {
    //开发环境对值做校验
    assertProp(prop, key, value, vm, absent)
  }
  return value
}

/**
 * Get the default value of a prop.
 */
// 获取设置的默认值
function getPropDefaultValue (vm: ?Component, prop: PropOptions, key: string): any {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {   // 没有设置默认值的话，直接返回undefined
    return undefined
  }
  const def = prop.default
  // warn against non-factory defaults for Object & Array
  if (process.env.NODE_ENV !== 'production' && isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    )
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
    /*
     优化，避免不必要的更新， 避免触发不必要的 userwatcher
     如果props默认值时一个对象的话，父组件有没有传值，它就会调用调用工厂函数生成一个默认值独享，每次生成的对象的地址是不一样的，可能会触发 user watcher， 为了避免触发不必要的watcher,组件更新后，会看原来的vm_props[key]是否之前已经生成过了，
     生成过就用原来的，不再重复调用，
     */
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
    // 默认值default一个函数的话，就执行这个函数，得到返回值作为默认值
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 会报出警告，但是不会阻止程序继续运行
 */
function assertProp (
  prop: PropOptions,
  name: string,
  value: any,   // 父组件传递给子组件的props的值
  vm: ?Component,
  absent: boolean   // 值是否缺省的 true 就是缺省的，即父组件没有传值给子组件
) {
  if (prop.required && absent) {  // 如果设置的值是必传的，但是却又没有传，就会报出警告
    warn(
      'Missing required prop: "' + name + '"',
      vm
    )
    return
  }

  // value 的值为null或者undefined， 但是也没有设置为必填的话，也不会报错
  if (value == null && !prop.required) {
    return
  }


  let type = prop.type
  let valid = !type || type === true   // type可以不配置，或者配置为true，
  const expectedTypes = []
  if (type) {
    if (!Array.isArray(type)) {   // 如果type不是数组，将type转为数组，方便后续统一处理
      type = [type]
    }

    // for循环，判断接收的props的类型是否在type之内，在的话 最后 valid为true，否则为false
    for (let i = 0; i < type.length && !valid; i++) {  // 匹配上的话valid为true，循环结束，否则执行所有的循环
      const assertedType = assertType(value, type[i]) // assertType
      expectedTypes.push(assertedType.expectedType || '')  // expectedTypes  意思是期望的数据类型，
      valid = assertedType.valid
    }
  }

  if (!valid) {   // valid 为false 代表类型不匹配
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    )
    return
  }
  const validator = prop.validator  // t通过自定义函数来进行派单
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      )
    }
  }
}

const simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/

// 作用，判断value的类型在不在type之内，不在的话 valid为false， 在的话valid为true。
function assertType (value: any, type: Function): {
  valid: boolean;
  expectedType: string;
} {
  let valid
  const expectedType = getType(type)   // 获取类型字符串
  if (simpleCheckRE.test(expectedType)) {  // 如果类型是 simpleCheckRE中的一种的话
    const t = typeof value
    valid = t === expectedType.toLowerCase()
    // for primitive wrapper objects
    if (!valid && t === 'object') {   // value 可能是 由构造函数创建的数据类型 例如 value = new String('json');value 就是一个对象
      valid = value instanceof type
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value)
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value)
  } else {
    valid = value instanceof type
  }
  return {
    valid,
    expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  const match = fn && fn.toString().match(/^\s*function (\w+)/)
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

/*
type是boolean
 expectedyTypes可以是单个的值 String ,也可以以是一个数组类型的 [String,Number]
 本函数目的，判断，props熟悉可不可以接收boolean类型的值
 */
function getTypeIndex (type, expectedTypes): number {
  if (!Array.isArray(expectedTypes)) {   //是单个类型的值的话
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  // 是数组类型的话
  for (let i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  let message = `Invalid prop: type check failed for prop "${name}".` +
    ` Expected ${expectedTypes.map(capitalize).join(', ')}`
  const expectedType = expectedTypes[0]
  const receivedType = toRawType(value)   // 计算出接收的数据类型
  const expectedValue = styleValue(value, expectedType)
  const receivedValue = styleValue(value, receivedType)
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += ` with value ${expectedValue}`
  }
  message += `, got ${receivedType} `
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += `with value ${receivedValue}.`
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return `"${value}"`
  } else if (type === 'Number') {
    return `${Number(value)}`
  } else {
    return `${value}`
  }
}

function isExplicable (value) {
  const explicitTypes = ['string', 'number', 'boolean']
  return explicitTypes.some(elem => value.toLowerCase() === elem)
}

function isBoolean (...args) {
  return args.some(elem => elem.toLowerCase() === 'boolean')
}
